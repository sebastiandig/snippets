# ------------------------------------------------------------
# Defaults
# ------------------------------------------------------------
snippet lib
	library("${1:package}")

snippet req
	require("${1:package}")

snippet src
	source("${1:file.R}")

snippet ret
	return(${1:code})

snippet mat
	matrix(${1:data}, nrow = ${2:rows}, ncol = ${3:cols})

snippet sg
	setGeneric("${1:generic}", function(${2:x, ...}) {
		standardGeneric("${1:generic}")
	})

snippet sm
	setMethod("${1:generic}", ${2:class}, function(${2:x, ...}) {
		${0}
	})

snippet sc
	setClass("${1:Class}", slots = c(${2:name = "type"}))

snippet if
	if (${1:condition}) {
		${0}
	}

snippet el
	else {
		${0}
	}

snippet ei
	else if (${1:condition}) {
		${0}
	}

# edit June 2, 2023 to include `end of function`
snippet fun
	${1:name} <- function(${2:variables}) {
		${0}
		
	    # ---- end of function ${1:name}
	}

snippet for
	for (${1:variable} in ${2:vector}) {
		${0}
	}

snippet while
	while (${1:condition}) {
		${0}
	}

snippet switch
	switch(${1:object},
		${2:case} = ${3:action}
	)

snippet apply
	apply(${1:array}, ${2:margin}, ${3:...})

snippet lapply
	lapply(${1:list}, ${2:function})

snippet sapply
	sapply(${1:list}, ${2:function})

snippet mapply
	mapply(${1:function}, ${2:...})

snippet tapply
	tapply(${1:vector}, ${2:index}, ${3:function})

snippet vapply
	vapply(${1:list}, ${2:function}, FUN.VALUE = ${3:type}, ${4:...})

snippet rapply
	rapply(${1:list}, ${2:function})

snippet ts
	`r paste("#", date(), "------------------------------\n")`

snippet dl
	`r paste("# ------------------------------\n")`

snippet shinyapp
	library(shiny)
	
	ui <- fluidPage(
	  ${0}
	)
	
	server <- function(input, output, session) {
	  
	}
	
	shinyApp(ui, server)

snippet shinymod
	${1:name}_UI <- function(id) {
	  ns <- NS(id)
	  tagList(
		${0}
	  )
	}
	
	${1:name} <- function(input, output, session) {
	  
	}

snippet tryc
	${1:variable} <- tryCatch({
		${2}
	}, warning = function(w) {
	message(sprintf("Warning in %s: %s", deparse(w[["call"]]), w[["message"]]))
		${3}
	}, error = function(e) {
	message(sprintf("Error in %s: %s", deparse(e[["call"]]), e[["message"]]))
		${4}
	}, finally = {
		${5}
	})
	
# ------------------------------------------------------------
# Snippets below from https://github.com/gadenbuie/snippets	
# ------------------------------------------------------------
# standard libraries to load
# updated with comment April 16, 2023
# - this snippet not used anymore in favor of `tidyvers2` with 
#   with `librarian` package
snippet tidyverse
	library("ggplot2")
	library("tibble")
	library("tidyr")
	library("readr")
	library("purrr")
	library("dplyr")
	library("stringr")
	library("forcats")
	library("lubridate")
	library("glue")
	library("fs")
	library("magrittr")
	library("here")
	# library("broom") # optional

# added Nov 26, 2022 by Sebastian Di Geronimo
# ---- updated Apil 16th, 2023
# - using if statement at top in case giving to someone else they will
#   have less issues if they don't have `librarian` 
#   - also will help with downloading from github if they specify the 
#     user
# - changed because `conflicted` seems to work if included in `shelf()`
# - `conflicts_prefer()` seems to be just a clear without needing quotes

snippet tidyverse2
	if (!nzchar(system.file(package = "librarian"))) 
		install.packages("librarian")

	librarian::shelf(
		quiet = TRUE,
		librarian, conflicted, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,
		forcats, lubridate, glue, fs, magrittr, here,
		# broom # optional
		
		# additional
		
	)
	
	# shelf(conflicted) # may be needed if won't allow loading of certain packages

	conflicts_prefer(
		dplyr::filter(), 
		dplyr::select()
		)

# removed Apil 16th, 2023

#	library("conflicted")
	
#	conflict_prefer("filter", "dplyr")
#	conflict_prefer("select", "dplyr")


# ------------------------------------------------------------
# operators
# ------------------------------------------------------------

snippet op:default
	# use y if x is.null
	`%||%` <- function(x, y) if (is.null(x)) y else x

snippet op:notnull
	# use y if x is not null (otherwise NULL)
	`%??%` <- function(x, y) if (!is.null(x)) y

snippet op:notnullish
	# use y if x is not null(ish) (otherwise NULL)
	`%??%` <- function(x, y) if (!is.null(x) && x != "") y
	
# ------------------------------------------------------------
# general
# ------------------------------------------------------------

snippet aa
	${1:var} <- ${1:var} %>%
	  ${0}

snippet qq
	${1:var} %>%
	  ${0}

snippet aq
	${1:newvar} <- ${2:df} %>%
	  ${0}

snippet prettydate
	strftime(Sys.time(), "%A, %b %d, %Y")

snippet tts
	strftime(Sys.time(), "${1:%F %T}")

snippet dateprnt
	`r paste("# ${1:Author}", strftime(Sys.time(), "%A, %b %d, %Y"))`

# Sebastian D., Nov 12, 2022
snippet hdr1
	# ============================================================================ #
	# ---- ${1:header} ----
	# ============================================================================ #	

snippet hdr2
	# ---- ${1:header} ----

snippet hdr3
	# ---- ${1:header}

snippet a=
	${1:opt} = ${1:opt}

snippet zz
	${1:var} <- ${1:var} %||% ${0}

snippet hh
	here::here("${1:path}")

snippet ie
	if (${1:cond}) ${2:true} else ${3:false}

# ------------------------------------------------------------
# ggplot2
# ------------------------------------------------------------

snippet gg "ggplot generic"
	ggplot(${1:data}, aes(${2:aes})) + ${0}

snippet gl "ggplot line"
	ggplot(${1:data}, aes(${2:x}, ${3:y})) + 
	geom_line()${0}

snippet gp "ggplot point"
	ggplot(${1:data}, aes(${2:x}, ${3:y})) + 
	geom_point()${0}

snippet gs "ggsave()"
	ggsave("${1:filename}.pdf", width = ${2:6}, height = ${3:6})${0}

snippet ge "geom_*"
	geom_${1:point}(${0})

snippet ggeb "element_blank"
	element_blank($0)

snippet gger "element_rect"
	element_rect($0)

snippet gget "element_text"
	element_text($0)

snippet ggel "element_line"
	element_line($0)

# ------------------------------------------------------------
# dplyr, purrr
# ------------------------------------------------------------
snippet br "bind_rows()"
	bind_rows(${0})

snippet bc "bind_cols()"
	bind_cols(${0})

snippet jo "*_join"
	${1:inner}_join(${0})

snippet pmd "purrr::map_dfr()"
	purrr::map_dfr(${0})

snippet pmdc "purrr::map_dfc()"
	purrr::map_dfc(${0})

snippet pm "purrr::map()"
	purrr::map(${0})

snippet pmc "purrr::map_chr()"
	purrr::map_chr(${0})

snippet pmi "purrr::map_int()"
	purrr::map_int(${0})

snippet pmb "purrr::map_lgl()"
	purrr::map_lgl(${0})

snippet pmdb "purrr::map_dbl()"
	purrr::map_dbl(${0})
	
# ------------------------------------------------------------
# rmarkdown 
# ------------------------------------------------------------
snippet r
	```{r ${1:label}, ${2:options}}
	${0}
	```	

# not needed anymore
# separate two chunks 
snippet r2
	```
	```{r ${1:label}}
	
# ------------------------------------------------------------
# Header for functions (March 29, 2023)
# ------------------------------------------------------------
snippet fn_tst
	cat(docthis::doc_this(${1:obj}))

# removed (2/08/2022)
# snippet fun_1head
#	${6:}littleboxes::littleboxes() # Run after function name, then delete
#	# ${1:function name}
#	# ---- DESCRIPTION: ------
#	# ${3:Description}
#	#
#	# ---- INPUTS: -----------
#	# ${4:Input} =  
#	#
#	# ---- OUTPUTS: ----------
#	# ${5:Output} = 
#	#
#	# ---- NOTES: ------------
#	#
#	# ---- REFERENCES(s): ----
#	#
#	# ---- AUTHOR(s): --------
#	`r paste0("# ${2:Sebastian Di Geronimo} (", Sys.time(), ")")`

# old method (April 15, 2022)
# snippet fun_head
# ============================================================================ #
#                                                                              # 
#               ${2:name}           										   #
#                                                                              #    
# ============================================================================ #
# ---- DESCRIPTION: ------
# ${3:Description}
#
# ---- INPUTS: -----------
# ${4:Input} =  
#
# ---- OUTPUTS: ----------
# ${5:Output} = 
#
# ---- NOTES: ------------
#
# ---- REFERENCES(s): ----
#
# ---- AUTHOR(s): --------
#`r paste0("# ${1:Sebastian Di Geronimo} (", Sys.time(), ")")`

snippet fun_2fix
	${6:}littleboxes::littleboxes() # Run after function name, then delete
	# ${1:function name}

# Author added April 30, 2023 for documentation
snippet fun_author
	#'
	`r paste0("#' @author ${2:Sebastian Di Geronimo} (", format(Sys.Date(), "%B %d, %Y"), ")")`
	#'

# not needed anymore (Feburary 16, 2023)
#snippet fun_fix
#	---- DESCRIPTION: ------
#	---- INPUTS: -----------
#	---- OUTPUTS: ----------
#	---- NOTES: ------------
#	---- REFERENCES(s): ----
#	---- AUTHOR(s): --------

# shortcut to matrix multiplication
snippet mm 
	%*%

# shorcut to add header to file
# from ideas of https://stackoverflow.com/questions/2470248/write-lines-of-text-to-a-file-in-r
snippet hfile
	# type any text inside glue, 
	# since it uses glue, you can add values from variables like {var}
	txt <- glue("${1:text"}, 
				 .trim = F
				 )
	file <- file("${2:filename}")
	writeLines(${3:yourObject}, file)
	close(file)
	
# ------------------------------------------------------------
# Pivoting Shortcuts (August 23, 2022)
# from https://www.infoworld.com/article/3637083/never-look-up-tidyrs-pivotwider-or-pivotlonger-again.html
# ------------------------------------------------------------
#snippet plonger
#	pivot_longer(${1:mydf},
#	             cols = ${2:columns to pivot long},
#	             names_to = "${3:desired name for category column}",
#	             values_to = "${4:desired name for value column}"
#	)

#snippet pwider
#	pivot_wider(${1:mydf},
#	             # id_cols = ${2:optional vector of unaffected columns},
#	             names_from = c(${3:category column(s) to pivot wide}),
#	             values_from = c(${4:value column(s) that hold data for each category column}),
#	             names_sep = "_"         
#	) 

# update plonger (Janurary 30, 2023)
snippet plonger	
	 pivot_longer(
	   data      = .,
	   cols      = c(),     # columns to pivot long,
	   names_to  = "name",  # desired name for category column
	   values_to = "value", # desired name for value column
	   )

# update pwider (Feburary 02, 2023)
snippet pwider
	pivot_wider(
	  data         = .,
	  id_cols      = c(), # *optional* vector of unaffected columns,
	  names_from   = c(), # category column(s) to pivot wide
	  values_from  = c(), # value column(s) that hold data for each category column
	  names_sep    = "_",
	  names_repair = janitor::make_clean_names
	  )

# ------------------------------------------------------------
# Shortcut: Lambda function (March 16, 2023)
# ------------------------------------------------------------
# ex (\(x) x + 1)(3)
snippet lam
	(\(x) ${1:fun})

# ------------------------------------------------------------
# Shortcut: print date for qmd header (March 22, 2023)
# ------------------------------------------------------------
snippet dt
	date: "`r Sys.Date()`"
	
# ------------------------------------------------------------
# Shortcut: Get File Name Skeleton (April 4, 2023)
# ------------------------------------------------------------	
# update (May 9, 2023)
# - change ${4:jpeg} to ${4:ext}
snippet filen
	here("${1:dir1}", "${2:dir2}",
		 glue("${3:f_nm}",
		      format(Sys.time(), '_%Y%m%d_%H%M%S'),
		      ".${4:ext}")
		      )

# ------------------------------------------------------------
# Shortcut: Start `map()` function (May 9, 2023)
# ------------------------------------------------------------	
snippet fun_map
	function(${1:input}) {
		${2:}
	}


# ------------------------------------------------------------
# Shortcut: Start `save_gg` function (Oct 2, 2023)
# ------------------------------------------------------------
# Needs "\" before "$" or will remove everything after it
# i.e. "\$"
# snippet save_gg
# 	# ---- save plot
# 	# save arguments
# 	sv_arg <-
# 	  list(
# 	    sv_loc    = dir_plt_save,
# 	    sv_nm     = "${1:name}", # edit name
# 	    overwrite = FALSE
# 	  ) %>%
# 	  c(
# 	    .,
# 	    exists = dir_ls(.\$sv_loc, regexp = .\$sv_nm) %>% is_empty()
# 	  )
# 	
# 	# save
# 	if (sv_arg\$exists | sv_arg\$overwrite) {
# 	  save_gg(
# 	    plt            = ${2:last_plot()}, # edit if want specific plot
# 	    save_location  = sv_arg\$sv_loc,
# 	    save_name      = sv_arg\$sv_nm[1],
# 	    verbose        = TRUE,
# 	    time_stamp_fmt = "%Y%m%d_%H%M%S",
# 	    device         = "jpeg",
# 	    height         = 9.7,
# 	    width          = 19,
# 	    dpi            = 600,
# 	    units          = "in",
# 	    bg             = "white"
# 	  )
# 	} else {
# 	  cli::cli_alert_info(
# 	    c(
# 	      "Skipping saving of {.file {sv_arg\$sv_nm}} ",
# 	      "because exists ",
# 	      "and/or overwrite is set {.var FALSE}"
# 	    )
# 	  )
# 	}
# 	
# 	rm(sv_arg)
	
snippet save_gg
	# ---- save plot
	save_gg(
	  plt            = ${2:last_plot()}, # edit if want specific plot
	  save_location  = ${3:dir_plt_save},
	  save_name      = "${1:plot_name}",
	  verbose        = TRUE,
	  overwrite      = FALSE,
	  time_stamp_fmt = "%Y%m%d_%H%M%S",
	  device         = "jpeg",
	  height         = ${4:9.7},
	  width          = ${5:19},
	  dpi            = 600,
	  units          = "in",
	  bg             = "white"
	  )

snippet save_walk
	# save ${1:data}
	${1:data} %$%
	  walk2(
	    .x = ${2:name_column},
	    .y = ${3:plot_column},
	    \(.x, .y) {
	      .x %>%
	        str_to_lower() %>%
	        str_replace_all("\\\s", "_") %>%
	        # glue(., "${4:common suffix}", .sep = "_") %>% # remove if none needed
	        save_gg(
	          .y,
	          save_location  = ${5:dir_plt_save},
	          save_name      = .,
	          verbose        = TRUE,
	          time_stamp_fmt = "%Y%m%d_%H%M%S",
	          device         = "jpeg",
	          height         = ${6:9.7},
	          width          = ${7:19},
	          dpi            = 600,
	          units          = "in",
	          bg             = "white"
	        )
	    }
	  )


# ------------------------------------------------------------
# Shortcut: Start `save_csv` function (Oct 13, 2023)
# ------------------------------------------------------------
snippet save_csv
	# ---- save ${3:data_set}
	${1:data_set} %>%
	  save_csv(
	    .data          = .,
	    save_location  = ${2:dir_csv_save},
	    save_name      = "${3:plot_name}",
	    overwrite      = FALSE,
	    verbose        = TRUE,
	    time_stamp_fmt = "%Y%m%d_%H%M%S",
	    utf_8          = FALSE
	  )


# ------------------------------------------------------------
# Shortcut: Start `qmd_start` function (Oct 2023)
# ------------------------------------------------------------
# since creating a template qmd file is hard, this is the header code
# i want to use
snippet qmd_start
	date: "`r Sys.Date()`"
	# 1.0 ---- Summary of Document ----
	
	
	# 2.0 ---- Setup ----
	
	## 2.1 Load Libraries
	```{r setup, include=FALSE}
	if (!nzchar(system.file(package = "librarian"))) 
		install.packages("librarian")

	librarian::shelf(
		quiet = TRUE,
		librarian, conflicted, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,
		forcats, lubridate, glue, fs, magrittr, here,
		
		# additional
		
	)
	
	conflicts_prefer(
	  dplyr::filter(), 
	  dplyr::select()
	  )

	```

	## 2.2 Load Dataset
	
	```{r load-data}
	
# ------------------------------------------------------------
# Shortcut: For new shortcuts (Nov 3, 2023)
# ------------------------------------------------------------
# 
snippet shrtcut
	# ------------------------------------------------------------
	# Shortcut: ${1:shortcut purpose} (`r format(Sys.Date(), "%b %d, %Y")`)
	# ------------------------------------------------------------
	# 
	snippet ${2:shortcut name}

# ------------------------------------------------------------
# Shortcut: Quick Tip (Nov 03, 2023)
# ------------------------------------------------------------
# 
snippet quick_tip
	# ============================================================================ #
	# ---- ${1:Name of Tip} ----
	# ============================================================================ #
	# `r format(Sys.Date(), "%b %d, %Y")`
	
	
	# ============================================================================ #


# ------------------------------------------------------------
# Shortcut: Maximima Program (Oct 2023)
# ------------------------------------------------------------
# 
snippet maxima
	```{maxima}`r ''`
	L: sqrt(1 - 1/R^2);
	assume(R > 0)$
	'integrate(x, x, 0, L) = integrate(x, x, 0, L);
	```

